// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                  @id @default(autoincrement())
  email                 String               @unique
  name                  String
  lastname              String
  birthDate             DateTime
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @default(now())
  doctorAppointments    Appointment[]        @relation("doctor_appointment")
  patientAppointments   Appointment[]        @relation("patient_appointment")
  role                  Role                 @default(PATIENT)
  curp                  String?
  weight                Decimal?
  height                Decimal?
  gender                Gender?
  doctorMedicalHistory  MedicalHistory[]     @relation("doctor_medical_history")
  patientMedicalHistory MedicalHistory[]     @relation("patient_medical_history")
  doctorPrescription    Prescription[]       @relation("doctor_prescription")
  patientPrescription   Prescription[]       @relation("patient_prescription")
  doctorAvailability    DoctorAvailability[] @relation("doctor_availability")
  notifications         Notification[]       @relation("user_notification")
}

model Appointment {
  id           Int               @id @default(autoincrement())
  patient      User              @relation("patient_appointment", fields: [patientId], references: [id])
  patientId    Int
  doctor       User              @relation("doctor_appointment", fields: [doctorId], references: [id])
  doctorId     Int
  status       AppointmentStatus @default(PENDING)
  reason       String?
  scheduleDate DateTime
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now())
}

model MedicalHistory {
  id            Int            @id @default(autoincrement())
  patient       User           @relation("patient_medical_history", fields: [patientId], references: [id])
  patientId     Int
  doctor        User           @relation("doctor_medical_history", fields: [doctorId], references: [id])
  doctorId      Int
  diagnosis     String
  notes         String?
  prescriptions Prescription[]
  createdAt     DateTime       @default(now())
}

model Prescription {
  id                   Int                     @id @default(autoincrement())
  patient              User                    @relation("patient_prescription", fields: [patientId], references: [id])
  patientId            Int
  doctor               User                    @relation("doctor_prescription", fields: [doctorId], references: [id])
  doctorId             Int
  MedicalHistory       MedicalHistory?         @relation(fields: [medicalHistoryId], references: [id])
  medicalHistoryId     Int?
  prescriptionMedicine Prescription_Medicine[] @relation("prescription_prescription_medicine")
  status               PrescriptionStatus      @default(ISSUED)
  createdAt            DateTime                @default(now())
}

model Prescription_Medicine {
  id             Int          @id @default(autoincrement())
  prescription   Prescription @relation("prescription_prescription_medicine", fields: [prescriptionId], references: [id])
  prescriptionId Int
  medicine       Medicine     @relation("medicine_prescription_medicine", fields: [medicineId], references: [id])
  medicineId     Int
  dosage         String
  frequency      String
  duration       String
  comments       String?
}

model Medicine {
  id                   Int                     @id @default(autoincrement())
  fdaId                Int?                    @unique
  brandName            String                  @default("N/A")
  genericName          String                  @default("N/A")
  quantity             Int
  criticalThreshold    Int
  prescriptionMedicine Prescription_Medicine[] @relation("medicine_prescription_medicine")
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @default(now())
}

model DoctorAvailability {
  id        Int      @id @default(autoincrement())
  doctorId  Int
  doctor    User     @relation("doctor_availability", fields: [doctorId], references: [id])
  dayOfWeek Int
  startTime DateTime
  endTime   DateTime
}

model Notification {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation("user_notification", fields: [userId], references: [id])
  appointmentId Int
  message       String
  priority      Int
  scheduledAt   DateTime
  sent          Boolean  @default(false)
  createdAt     DateTime @default(now())
}

enum Role {
  ADMIN
  DOCTOR
  PHARMACIST
  PATIENT
}

enum PrescriptionStatus {
  ISSUED
  DISPENSED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  RESCHEDULED
  COMPLETED
}

enum Gender {
  MALE
  FEMALE
}
